generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String?    @unique
  password      String?
  phone         String?    @unique
  github_id     String?    @unique
  birthday      String?
  avatar        String?
  address       String?
  detailAddress String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  tokens        SMSToken[]
  products      Product[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  chat_rooms    ChatRoom[]
  messages      Message[]

  favs        Fav[]
  sales       Sale[]
  purchase    Purchase[]
  liveStreams LiveStream[]

  ratings Rating[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  state       Int    @default(1)
  buyerId     Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  ChatRoom ChatRoom[]

  favs     Fav[]
  sales    Sale[]
  purchase Purchase[]
}

model Fav {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // @@unique([userId, productId])
  @@id(name: "id", [userId, productId])
}

model Sale {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  purchaseId Int
  assessment Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id(name: "id", [userId, productId])
}

model Purchase {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  saleId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id(name: "id", [userId, productId])
}

// model Assessment {
//   user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     Int
//   product    Product  @relation(fields: [productId], references: [id])
//   productId  Int
//   saleId     Int
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   @@id(name: "id", [userId, productId])
// }

model Rating {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  rating     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id(name: "id", [userId])
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  photo       String?
  views       Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id      String  @id @default(cuid())
  users   User[]
  product Product @relation(fields: [productId], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Messages   Message[]
  productId  Int
}

model Message {
  id      Int     @id @default(autoincrement())
  payload String
  isRead  Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}

model LiveStream {
  id         Int     @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  thumbnail  String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}
